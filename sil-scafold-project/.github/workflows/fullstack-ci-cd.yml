name: Full-Stack CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    env:
      SECRET_KEY: test-secret-key
      DEBUG: "True"
      DB_ENGINE: django.db.backends.postgresql
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      CELERY_BROKER_URL: redis://localhost:6379/0
      CELERY_RESULT_BACKEND: redis://localhost:6379/0
      OIDC_ISSUER: https://test-issuer.example.com
      OIDC_AUDIENCE: test-audience
      OIDC_JWKS_URL: https://test-issuer.example.com/.well-known/jwks.json
      AFRICASTALKING_USERNAME: sandbox
      AFRICASTALKING_API_KEY: test-api-key
      AFRICASTALKING_SANDBOX: "True"
      EMAIL_HOST: localhost
      EMAIL_PORT: 1025
      EMAIL_HOST_USER: ""
      EMAIL_HOST_PASSWORD: ""
      EMAIL_USE_TLS: "False"
      DEFAULT_FROM_EMAIL: "test@example.com"
      ADMIN_EMAIL: "admin@example.com"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        working-directory: ./sil-backend-scaffold
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov flake8
      
      - name: Lint with flake8
        working-directory: ./sil-backend-scaffold
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run migrations
        working-directory: ./sil-backend-scaffold
        run: |
          python manage.py migrate
      
      - name: Run tests with coverage
        working-directory: ./sil-backend-scaffold
        run: |
          pytest --cov=store --cov=sil_project --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./sil-backend-scaffold/coverage.xml
          flags: backend
          fail_ci_if_error: true

  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        working-directory: ./neo-cartel
        run: npm ci
      
      - name: Lint
        working-directory: ./neo-cartel
        run: npm run lint
      
      - name: Run tests with coverage
        working-directory: ./neo-cartel
        run: npm run test:coverage
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./neo-cartel/coverage/
          flags: frontend
          fail_ci_if_error: true
          
  e2e-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install backend dependencies
        working-directory: ./sil-backend-scaffold
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install frontend dependencies
        working-directory: ./neo-cartel
        run: npm ci
      
      - name: Start backend server
        working-directory: ./sil-backend-scaffold
        run: |
          python manage.py migrate
          python manage.py runserver &
        env:
          SECRET_KEY: test-secret-key
          DEBUG: "True"
          DB_ENGINE: django.db.backends.sqlite3
          DB_NAME: db.sqlite3
          AFRICASTALKING_USERNAME: sandbox
          AFRICASTALKING_API_KEY: test-api-key
          AFRICASTALKING_SANDBOX: "True"
          DEFAULT_FROM_EMAIL: "test@example.com"
          ADMIN_EMAIL: "admin@example.com"
      
      - name: Run E2E tests
        working-directory: ./neo-cartel
        run: npm run test:e2e
      
      - name: Upload Cypress screenshots and videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-artifacts
          path: |
            ./neo-cartel/cypress/screenshots
            ./neo-cartel/cypress/videos

  build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./sil-backend-scaffold
          push: false
          tags: sil-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install frontend dependencies
        working-directory: ./neo-cartel
        run: npm ci
      
      - name: Build frontend
        working-directory: ./neo-cartel
        run: npm run build
      
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./neo-cartel/dist/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: Download frontend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./dist/
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploy to production
        # This is a placeholder - replace with your actual deployment steps
        run: |
          echo "Deploying to production server..."
          # Example:
          # rsync -avz --delete dist/ user@your-server.com:/var/www/app/
          # ssh user@your-server.com 'cd /path/to/backend && docker-compose pull && docker-compose up -d'
          echo "Deployed successfully!"